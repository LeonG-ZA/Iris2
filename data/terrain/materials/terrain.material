//###########################################
// MULTITEXTURE TERRAIN MAT
//###########################################

// simple material without transitions
// should not receive or cast shadows!
material terrain_multitex_far
{
	receive_shadows off
	technique
	{
		pass
		{
			texture_unit
			{
				// set via script : texture groundatlas.png
				tex_coord_set	0
			}
		}
	}
}

// simple material without transitions
//material terrain_multitex_simple_mat
material terrain_multitex_simple_mat
{
	receive_shadows on
	technique
	{
		pass
		{
			//scene_blend alpha_blend
			//alpha_rejection greater 0
			texture_unit
			{
				// draws ground and applies diffuse lighting
				// set via script : texture groundatlas.png
				tex_coord_set	0
				colour_op_ex	modulate src_texture src_diffuse
			}
		}
	}
}

//material terrain_multitex_mat : Ogre/DepthShadowmap/BasicTemplateMaterial
material terrain_multitex_mat
{
	receive_shadows on
	technique
	{
		pass
		{
			//scene_blend alpha_blend
			//alpha_rejection greater 0
			texture_unit
			{
                filtering anisotropic
                max_anisotropy 8
				// draws ground at full brightness
				// set via script : texture groundatlas.png
				tex_coord_set	0
				colour_op_ex	source1 src_texture src_texture
			}
			texture_unit 
			{
				// loads transition mask into alpha channel
				// set via script : texture maskatlas.png alpha
				tex_coord_set 1
				colour_op_ex	source1 src_current src_current
				alpha_op_ex		source1 src_texture src_texture
			}
			texture_unit
			{
                filtering anisotropic
                max_anisotropy 8
				// loads secondardy ground and blends it using transition mask
				// set via script : texture groundatlas.png
				tex_coord_set 2
				colour_op_ex	blend_current_alpha src_texture src_current
				// alpha_op_ex		source1 src_current src_current
			}
			texture_unit
			{
                filtering anisotropic
                max_anisotropy 8
				// applies diffuse lighting
				// tex_coord_set 3
				colour_op_ex	modulate src_current src_diffuse
				// alpha_op_ex		source1 src_texture src_texture
			}
		}
	}
}

material water
{
	receive_shadows on
	technique
	{
		pass
		{
			ambient 1.0 1.0 1.0 1.0
			specular 0 0 0 1.0

			texture_unit
			{
				texture water.jpg
				tex_address_mode wrap
				
				// animate using texcoords
				// wave_xform <xform_type> <wave_type> <base> <frequency> <phase> <amplitude>
				wave_xform scroll_x sine 1.0 0.1 0.0 0.1
				wave_xform scroll_y sine 1.0 0.1 0.1 0.1
				//scroll_anim 0.2 0.1
			}
		}
	}
}






//----------------------------
// Distortion effects from ogre samples
//----------------------------

vertex_program Water/FresnelRefractReflectVP cg
{
	source Example_Fresnel.cg
	entry_point main_vp
	profiles vs_1_1 arbvp1
}
vertex_program Water/FresnelRefractReflectVPold cg
{
	source Example_Fresnel.cg
	entry_point main_vp_old
	profiles vs_1_1 arbvp1
}

fragment_program Water/FresnelRefractReflectFP cg
{
	source Example_Fresnel.cg
	entry_point main_fp
	// sorry, ps_1_1 and fp20 can't do this
	profiles ps_2_0 arbfp1
}

fragment_program Water/FresnelRefractReflectPS asm
{
	source Example_FresnelPS.asm
	// sorry, only for ps_1_4 :)
	syntax ps_1_4

}

material Water/FresnelReflectionRefraction
{
	receive_shadows off
	
	// ps_2_0 / arbfp1
	technique
	{
		pass 
		{
			
			vertex_program_ref Water/FresnelRefractReflectVP
			{
				param_named_auto worldViewProjMatrix worldviewproj_matrix
				param_named_auto eyePosition camera_position_object_space
				param_named_auto timeVal time 0.05
				param_named scroll float 1  
				param_named scale float 1 
				param_named noise float 1 
				// scroll and noisePos will need updating per frame
			}
			fragment_program_ref Water/FresnelRefractReflectFP
			{
				param_named fresnelBias float -0.1 
				param_named fresnelScale float 1.8 
				param_named fresnelPower float 1  
				param_named tintColour float4 0.0 0.0 0.1 1
				param_named noiseScale float 0.05 
			}
			// Noise
			texture_unit
			{
				// Perlin noise volume
				texture waves2.dds
				// min / mag filtering, no mip
				filtering linear linear none
			}
			// Reflection
			texture_unit
			{
				// Will be filled in at runtime
				texture Reflection_
				tex_address_mode clamp
				// needed by ps.1.4
				tex_coord_set 1
			}
			// Refraction
			texture_unit
			{
				// Will be filled in at runtime
				texture Refraction_
				tex_address_mode clamp
				// needed by ps.1.4
				tex_coord_set 2
			}
		}
		
			
	}

	// ATI 8500 +
	technique
	{
		pass
		{
			vertex_program_ref Water/FresnelRefractReflectVPold
			{
				param_named_auto worldViewProjMatrix worldviewproj_matrix
				param_named_auto eyePosition camera_position_object_space
				param_named fresnelBias float -0.3
				param_named fresnelScale float 1.4
				param_named fresnelPower float 8
				param_named_auto timeVal time_0_1 20
				param_named scroll float 1 
				param_named scale float 4 
				param_named noise float 1
				// scroll and noisePos will need updating per frame
			}

			// for ATI RADEON 8500 - 9200
			fragment_program_ref Water/FresnelRefractReflectPS
			{
				// distortionRange
				param_indexed 0  float 0.025  
				// tintColour
				param_indexed 1  float4 0.05 0.12 0.15 1
			}

			// Noise
			texture_unit
			{
				// Perlin noise volume
				texture perlinvolume.dds 3d
				// min / mag filtering, no mip
				filtering linear linear none
			}
			// Reflection
			texture_unit
			{
				// Will be filled in at runtime
				texture Reflection_
				tex_address_mode clamp
				// needed by ps.1.4
				tex_coord_set 1
			}
			// Refraction
			texture_unit
			{
				// Will be filled in at runtime
				texture Refraction_
				tex_address_mode clamp
				// needed by ps.1.4
				tex_coord_set 2
			}
		}
	}    
}
