// Same as below, but for use when rendering texture shadows
vertex_program Ogre/HardwareSkinningTwoWeightsShadowCasterCg cg
{
	source hardwareSkinning.cg
	entry_point hardwareSkinningTwoWeightsCaster_vp
	profiles vs_1_1 arbvp1
	includes_skeletal_animation true
}

vertex_program Ogre/HardwareSkinningTwoWeightsShadowCasterGLSL glsl
{
	source skinningTwoWeightsShadowCasterVp.glsl
	includes_skeletal_animation true
}

vertex_program Ogre/HardwareSkinningTwoWeightsShadowCaster unified
{
	delegate Ogre/HardwareSkinningTwoWeightsShadowCasterGLSL
	delegate Ogre/HardwareSkinningTwoWeightsShadowCasterCg

	default_params
	{
		param_named_auto worldMatrix3x4Array world_matrix_array_3x4
		param_named_auto viewProjectionMatrix viewproj_matrix
		param_named_auto ambient ambient_light_colour
	}
}

// -----------------------------------------------------------------

// Basic hardware skinning using two indexed weights per vertex
vertex_program Ogre/HardwareSkinningTwoWeightsCg cg
{
   source hardwareSkinning.cg
   entry_point hardwareSkinningTwoWeights_vp
   profiles vs_1_1 arbvp1
   includes_skeletal_animation true
}

vertex_program Ogre/HardwareSkinningTwoWeightsGLSL glsl
{
   source skinningTwoWeightsVp.glsl
   includes_skeletal_animation true
}

vertex_program Ogre/HardwareSkinningTwoWeights unified
{
	delegate Ogre/HardwareSkinningTwoWeightsGLSL
	delegate Ogre/HardwareSkinningTwoWeightsCg

	default_params
	{
		param_named_auto worldMatrix3x4Array world_matrix_array_3x4
		param_named_auto viewProjectionMatrix viewproj_matrix
		param_named_auto lightPos[0] light_position 0
		param_named_auto lightPos[1] light_position 1
		param_named_auto lightDiffuseColour[0] light_diffuse_colour 0
		param_named_auto lightDiffuseColour[1] light_diffuse_colour 1
//		param_named_auto ambient ambient_light_colour
	}
}
